def plane_line_intersection(plane_equation, P1, P2):
    """
    Compute the intersection point between a line and a plane.
    Parameters:
        plane_equation (tuple): Coefficients (a, b, c, d) of the plane equation: ax + by + cz + d = 0
        P1, P2 (tuple): Two 3D points (x, y, z) defining the line segment
    Returns:
        tuple or None: Intersection point (x, y, z) if it exists, or None if the line is parallel to the plane.
    """
    a, b, c, d = plane_equation
    # The coordinates of the two points defining the line:
    x1, y1, z1 = P1
    x2, y2, z2 = P2
    
    denominator = a * (x2 - x1) + b * (y2 - y1) + c * (z2 - z1)

    if np.abs(denominator) < 1e-6:
        # Line and plane are parallel; no intersection
        return None

    t = -(a * x1 + b * y1 + c* z1 + d) / denominator
    
    # Compute the intersection point using parametric form of the line
    intersection = (
        x1 + t * (x2 - x1),
        y1 + t * (y2 - y1),
        z1 + t * (z2 - z1)
    )
    
    return intersection


valid_image_corners_2d = []
backprojections = []

# Process each camera geometry
for i in range(k): # k = number of your images
    camera_plane = geometries[2*i+1].vertices
    camera_center = geometries[2*(i+1)].vertices[6]
    image_center_3d = np.average(camera_plane, axis=0)

    # Ensure the plane normal faces the camera
    plane_orientation = np.dot(plane_equation[0:3], image_center_3d-camera_center)
    if plane_orientation > 0:
        plane_equation = -1 * plane_equation

    # Initialize 3D corners of the visible image region
    valid_image_corners_3d = np.copy(camera_plane)

    corners_2d = np.array([
        [0, input_height],               # bottom-left
        [input_width, input_height],    # bottom-right
        [input_width, 0],               # top-right
        [0, 0],                          # top-left
    ])
    
    # Define epsilon: smaller values retain more of the image,
    # but may lead to higher distortion or ceiling occlusion.
    epsilon = 0.1
    

    # Adjust corner 0 if its ray points away from the ceiling
    A = camera_plane[0]
    C = camera_center
    n = plane_equation[:3]
    I = plane_line_intersection(plane_equation, C, A)
    if np.dot(A - C, I - C) < 0:
        B = camera_plane[3]  # adjacent corner
        CA = A - C
        AB = B - A
        u = - (epsilon * np.linalg.norm(CA) + np.dot(n, CA)) / np.dot(AB, n)
        valid_image_corners_3d[0] = (1 - u) * A + u * B
        corners_2d[0] = [0, (1 - u) * input_height]
        

    # Adjust corner 1 if its ray points away from the ceiling
    A = camera_plane[1]
    I = plane_line_intersection(plane_equation, C, A)
    if np.dot(A - C, I - C) < 0:
        B = camera_plane[2]
        CA = A - C
        AB = B - A
        u = - (epsilon * np.linalg.norm(CA) + np.dot(n, CA)) / np.dot(AB, n)
        valid_image_corners_3d[1] = (1 - u) * A + u * B
        corners_2d[1] = [input_width, (1 - u) * input_height]

    # Save visible 2D corners
    valid_image_corners_2d.append(corners_2d)

    # Compute 3D backprojections of visible image corners onto the ceiling
    backprojection = []
    for j in range(4):
        I = plane_line_intersection(plane_equation, C, valid_image_corners_3d[j])
        backprojection.append(I)
    backprojections.append(backprojection)

    # Optional: Debug check that all backprojected points lie in front of the camera
    # for j in range(4):
    #     I = plane_line_intersection(plane_equation, C, backprojection[j])
    #     print(np.dot(backprojection[j] - C, I - C))
